from vyper.interfaces import ERC20
# from vyper.interfaces import ERC721


# --


# Transfer: event({_from: indexed(address), _to: indexed(address), _value: num256})
# Approval: event({_owner: indexed(address), _spender: indexed(address), _value: num256})



# struct PacketDropRecipient:
# 	has_received: bool
# 	amount_wei_received: uint256
# 	# packet_drop_



struct PacketDrop:
	sender: address
	amount_wei: uint256
	number_of_recipients_to_receive: int128
	number_of_recipients_has_received: int128
	amount_wei_sent_to_recipients: uint256
	message: String[128]
	recipients_addresses: address[10]
	recipients_values: uint256[10]
	recipients_block_numbers: uint256[10]

	# 

	# recipients: HashMap[address, PacketDropRecipient]
	

packet_drops_index: int128


# packet_drop_recipients_index: int128


packet_drops: HashMap[int128, PacketDrop]


# packet_drop_recipients: HashMap[int128, HashMap[int128, PacketDropRecipient]]
# _roles: HashMap[bytes32, HashMap[address, bool]]
# _admin_roles: HashMap[bytes32, bytes32]



celo_gold_token_erc20_address: constant(address) = 0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9


# celo_gold_token_erc20_address: constant(address) = 0x67c6829506DdF66Ed824Fd1cCC40665588Bc4631

# celo_gold_token_erc20_address: constant(address) = 0x6d0081857009cb79014df13e34fc49192f66aee1


# max_packet_drops_amount: public(int128)
# max_packet_drops_amount_wei: constant(uint256) = 10000000

# 0x6108bd56600436101561000d57610860565b60046000601c3760005163c576e28981186101f8576004358060801d81607f1d186108b45760e052600a60e05113156100b4576018610100527f546f6f206d616e7920726563697069656e7473207365742100000000000000006101205261010050610100518061012001818260206001820306601f82010390500336823750506308c379a060c052602060e0526101005160206001820306601f820103905060440160dcfd5b6000546101005260016101005160a052608052604060802033815534600182015560e051600282015560006003820155600060048201556024356005820155600681016000815560006001820155600060028201556000600382015560006004820155600060058201556000600682015560006007820155600060088201556000600982015550601081016000815560006001820155600060028201556000600382015560006004820155600060058201556000600682015560006007820155600060088201556000600982015550601a81016000815560006001820155600060028201556000600382015560006004820155600060058201556000600682015560006007820155600060088201556000600982015550506101005160018082018060801d81607f1d186108b4579050905060005561010051610120526020610120f35b346108b457633a0cbc07811861037b576004358060801d81607f1d186108b45760e052600160e05160a052608052604060802080546101005260018101546101205260028101546101405260038101546101605260048101546101805260058101546101a0526006810180546101c05260018101546101e05260028101546102005260038101546102205260048101546102405260058101546102605260068101546102805260078101546102a05260088101546102c05260098101546102e052506010810180546103005260018101546103205260028101546103405260038101546103605260048101546103805260058101546103a05260068101546103c05260078101546103e05260088101546104005260098101546104205250601a810180546104405260018101546104605260028101546104805260038101546104a05260048101546104c05260058101546104e0526006810154610500526007810154610520526008810154610540526009810154610560525050610480610100f35b630ff761a5811861085e576004358060801d81607f1d186108b45761026052600260016102605160a05260805260406080200154600360016102605160a052608052604060802001541261044057601d610280527f4e6f206d6f7265207061636b657473206c65667420666f7220796f75210000006102a0526102805061028051806102a001818260206001820306601f82010390500336823750506308c379a0610240526020610260526102805160206001820306601f820103905060440161025cfd5b600660016102605160a052608052604060802001805460e05260018101546101005260028101546101205260038101546101405260048101546101605260058101546101805260068101546101a05260078101546101c05260088101546101e0526009810154610200525033610220526104bb610280610866565b610280511561053b57601a6102a0527f596f75206861766520616c7265616479207265636569766564210000000000006102c0526102a0506102a051806102c001818260206001820306601f82010390500336823750506308c379a0610260526020610280526102a05160206001820306601f820103905060440161027cfd5b600160016102605160a0526080526040608020015461028052600460016102605160a052608052604060802001546102a052600260016102605160a052608052604060802001546102c052600360016102605160a052608052604060802001546102e052600160016102605160a0526080526040608020015461030052600460016102605160a0526080526040608020015461032052610280516102a0518082106108b4578082039050905060038082049050905060028082028215828483041417156108b457905090506103405260016102e0516102c0518082038060801d81607f1d186108b45790509050186106485761030051610320518082106108b45780820390509050610340525b600060046103a0527fa9059cbb000000000000000000000000000000000000000000000000000000006103c0526103a06004806020846103e00101826020850160045afa505080518201915050336020826103e0010152602081019050610340516020826103e0010152602081019050806103e0526103e0505060206104806103e051610400600073f194afdf50b03e69bd7d057c1aa9e10c9954e4c95af16106f6573d600060003e3d6000fd5b61046060203d808211610709578161070b565b805b905090508152805160200180610360828460045afa905050506000610360511461074a57610380516103605181816020036008021c90509050156108b4575b336001600360016102605160a05260805260406080200154600a8110156108b45702600660016102605160a0526080526040608020010155610340516001600360016102605160a05260805260406080200154600a8110156108b45702601060016102605160a0526080526040608020010155436001600360016102605160a05260805260406080200154600a8110156108b45702601a60016102605160a0526080526040608020010155600360016102605160a052608052604060802001805460018082018060801d81607f1d186108b45790509050815550600460016102605160a05260805260406080200180546103405181818301106108b4578082019050905081555060016103a05260206103a0f35b505b60006000fd5b6102406000600a818352015b60e061024051600a8110156108b4576020020151610220511861089b57505060018152506108b2565b815160010180835281141561087257505060008152505b565b600080fd5b6100046108bd036100046000396100046108bd036000f3



@external
def __init__():
	# --
	pass



# @external
# @payable
# def __default__():
#     # log Payment(msg.value, msg.sender)
#     pass



# those view only functions to check if it is indeed a valid packet, it exists - and there are remaining!

# @view
# @external
# def check_packet_is_valid() -> String[16]:
# 	# --



# 	return concat("Hello ", Greeter(msg.sender).name())




@view
@external
def get_packet_drop_recipient_txns(
	_pdi: int128,
) -> PacketDrop:
	# --

	return self.packet_drops[_pdi]






@payable
@external
def create_packet_drop(
	_number_of_recipients_to_receive: int128,
	_message: String[128],
) -> int128:
	# --

	assert _number_of_recipients_to_receive <= 10, 'Too many recipients set!'


	pdi: int128 = self.packet_drops_index


	self.packet_drops[pdi] = PacketDrop({
		sender: msg.sender,
		amount_wei: msg.value,
		number_of_recipients_to_receive: _number_of_recipients_to_receive,
		message: _message,
		number_of_recipients_has_received: 0,
		amount_wei_sent_to_recipients: 0,
		recipients_addresses: empty(address[10]),
		recipients_values: empty(uint256[10]),
		recipients_block_numbers: empty(uint256[10]),
	})


	self.packet_drops_index = pdi + 1


	return pdi



@internal
def _has_address_recieved_this_packet_drop(
	_recipients_addresses: address[10],
	_address: address,
) -> bool:
	# --
	for i in range(10):
		if _address == _recipients_addresses[i]:
			return True

	return False
	


# @external
# def _receive_packet_drop(
# 	_pdi: int128,
# ) -> bool:
# 	# --

# 	assert self.packet_drops[_pdi].sender != msg.sender, 'Cannot accept your own packet!'

# 	assert self.packet_drops[_pdi].number_of_recipients_has_received < self.packet_drops[_pdi].number_of_recipients_to_receive, 'No more packets left for you!'

# 	assert not self._has_address_recieved_this_packet_drop(self.packet_drops[_pdi].recipients_addresses, msg.sender), 'You have already received!'


# 	response: Bytes[32] = raw_call(
# 		celo_gold_token_erc20_address,
# 		concat(
# 			method_id("transfer(address,uint256)"),
# 			convert(msg.sender, bytes32),
# 			convert(value, bytes32),
# 		),
# 		max_outsize=32,
# 	)

# 	if len(response) != 0:
# 		assert convert(response, bool)

# 	return True




@external
def receive_packet_drop(
	_pdi: int128,
) -> bool:
	# --

	assert self.packet_drops[_pdi].sender != msg.sender, 'Cannot accept own packet!'

	assert self.packet_drops[_pdi].number_of_recipients_has_received < self.packet_drops[_pdi].number_of_recipients_to_receive, 'No more packets left for you!'

	assert not self._has_address_recieved_this_packet_drop(self.packet_drops[_pdi].recipients_addresses, msg.sender), 'You have already received!'



	a: uint256 = self.packet_drops[_pdi].amount_wei
	b: uint256 = self.packet_drops[_pdi].amount_wei_sent_to_recipients
	c: int128 = self.packet_drops[_pdi].number_of_recipients_to_receive
	d: int128 = self.packet_drops[_pdi].number_of_recipients_has_received


	value: uint256 = ((a - b) / 3) * 2

	if (d - c) == 1:
		value = a - b


	response: Bytes[32] = raw_call(
		celo_gold_token_erc20_address,
		concat(
			method_id("transfer(address,uint256)"),
			convert(msg.sender, bytes32),
			convert(value, bytes32),
		),
		max_outsize=32,
	)

	if len(response) != 0:
		assert convert(response, bool)


	self.packet_drops[_pdi].recipients_addresses[self.packet_drops[_pdi].number_of_recipients_has_received] = msg.sender
	self.packet_drops[_pdi].recipients_values[self.packet_drops[_pdi].number_of_recipients_has_received] = value
	self.packet_drops[_pdi].recipients_block_numbers[self.packet_drops[_pdi].number_of_recipients_has_received] = block.number

	# keccak /?? group in concat??

	self.packet_drops[_pdi].number_of_recipients_has_received += 1
	self.packet_drops[_pdi].amount_wei_sent_to_recipients += value


	return True






